(in-package :hprolog)

(defparameter *self* nil) ;; don't need it in this test

#+nil
(defparameter db
  '(
    ((:arrow :id574))
    ((:arrow :id558))
    ((:arrow :id553))
    ((:arrow :id537))
    ((:arrow :id532))
    ((:arrow :id527))
    ((:arrow :id522))
    ((:arrow :id510))
    ((:arrow :id494))
    ((:arrow :id482))
    ((:arrow :id477))
    ((:arrow :id465))
    ((:arrow :id455))
    ((:arrow :id450))
    ((:arrow :id437))
    ((:arrow :id429))
    ((:arrow :id421))
    ((:arrow :id411))
    ((:arrow :id406))
    ((:arrow :id390))
    ((:arrow :id385))
    ((:arrow :id380))
    ((:arrow_x :id574 4405.0))
    ((:arrow_x :id558 3605.0))
    ((:arrow_x :id553 3645.0))
    ((:arrow_x :id537 3671.3699999999999))
    ((:arrow_x :id532 3016.3699999999999))
    ((:arrow_x :id527 3671.3699999999999))
    ((:arrow_x :id522 4405.0))
    ((:arrow_x :id510 3625.0))
    ((:arrow_x :id494 4618.6300000000001))
    ((:arrow_x :id482 3215.0))
    ((:arrow_x :id477 3578.6300000000001))
    ((:arrow_x :id465 3578.6300000000001))
    ((:arrow_x :id455 4075.0))
    ((:arrow_x :id450 2970.0))
    ((:arrow_x :id437 3261.3699999999999))
    ((:arrow_x :id429 3578.6300000000001))
    ((:arrow_x :id421 4358.6300000000001))
    ((:arrow_x :id411 4095.0))
    ((:arrow_x :id406 3625.0))
    ((:arrow_x :id390 3625.0))
    ((:arrow_x :id385 3195.0))
    ((:arrow_x :id380 4048.6300000000001))
    ((:arrow_y :id574 253.63))
    ((:arrow_y :id558 973.63))
    ((:arrow_y :id553 973.63))
    ((:arrow_y :id537 860.0))
    ((:arrow_y :id532 350.0))
    ((:arrow_y :id527 690.0))
    ((:arrow_y :id522 346.37))
    ((:arrow_y :id510 813.63))
    ((:arrow_y :id494 300.0))
    ((:arrow_y :id482 253.63))
    ((:arrow_y :id477 170.0))
    ((:arrow_y :id465 170.0))
    ((:arrow_y :id455 346.37))
    ((:arrow_y :id450 396.37))
    ((:arrow_y :id437 300.0))
    ((:arrow_y :id429 490.0))
    ((:arrow_y :id421 300.0))
    ((:arrow_y :id411 253.63))
    ((:arrow_y :id406 443.63))
    ((:arrow_y :id390 643.63))
    ((:arrow_y :id385 346.37))
    ((:arrow_y :id380 300.0))
    ((:rect :id559))
    ((:rect :id538))
    ((:rect :id511))
    ((:rect :id501))
    ((:rect :id495))
    ((:rect :id466))
    ((:rect :id456))
    ((:rect :id430))
    ((:rect :id422))
    ((:rect :id412))
    ((:rect :id391))
    ((:roundedrect :id504))
    ((:metadata :id502 :id505))
    ((:ellipse :id575))
    ((:ellipse :id498))
    ((:ellipse :id483))
    ((:line :id570))
    ((:line :id554))
    ((:line :id549))
    ((:line :id533))
    ((:line :id528))
    ((:line :id523))
    ((:line :id518))
    ((:line :id506))
    ((:line :id490))
    ((:line :id478))
    ((:line :id473))
    ((:line :id461))
    ((:line :id451))
    ((:line :id446))
    ((:line :id433))
    ((:line :id425))
    ((:line :id417))
    ((:line :id407))
    ((:line :id402))
    ((:line :id386))
    ((:line :id381))
    ((:line :id376))
    ((:text :id596 struidG597))
    ((:text :id594 struidG595))
    ((:text :id592 struidG593))
    ((:text :id590 struidG591))
    ((:text :id588 struidG589))
    ((:text :id586 struidG587))
    ((:text :id584 struidG585))
    ((:text :id582 struidG583))
    ((:text :id580 struidG581))
    ((:text :id578 struidG579))
    ((:text :id576 struidG577))
    ((:text :id568 struidG569))
    ((:text :id566 struidG567))
    ((:text :id564 struidG565))
    ((:text :id562 struidG563))
    ((:text :id560 struidG561))
    ((:text :id547 struidG548))
    ((:text :id545 struidG546))
    ((:text :id543 struidG544))
    ((:text :id541 struidG542))
    ((:text :id539 struidG540))
    ((:text :id516 struidG517))
    ((:text :id514 struidG515))
    ((:text :id512 struidG513))
    ((:text :id505 struidG503))
    ((:text :id499 struidG500))
    ((:text :id496 struidG497))
    ((:text :id488 struidG489))
    ((:text :id486 struidG487))
    ((:text :id484 struidG485))
    ((:text :id471 struidG472))
    ((:text :id469 struidG470))
    ((:text :id467 struidG468))
    ((:text :id459 struidG460))
    ((:text :id457 struidG458))
    ((:text :id444 struidG445))
    ((:text :id442 struidG443))
    ((:text :id440 struidG441))
    ((:text :id438 struidG439))
    ((:text :id431 struidG432))
    ((:text :id423 struidG424))
    ((:text :id415 struidG416))
    ((:text :id413 struidG414))
    ((:text :id400 struidG401))
    ((:text :id398 struidG399))
    ((:text :id396 struidG397))
    ((:text :id394 struidG395))
    ((:text :id392 struidG393))
    ((:bounding_box_left :id572 4390))
    ((:bounding_box_left :id571 4385.0))
    ((:bounding_box_left :id556 3590))
    ((:bounding_box_left :id555 3585.0))
    ((:bounding_box_left :id551 3630))
    ((:bounding_box_left :id550 3625.0))
    ((:bounding_box_left :id535 3660))
    ((:bounding_box_left :id534 4165.0))
    ((:bounding_box_left :id530 3000))
    ((:bounding_box_left :id529 4165.0))
    ((:bounding_box_left :id525 3660))
    ((:bounding_box_left :id524 4165.0))
    ((:bounding_box_left :id520 4390))
    ((:bounding_box_left :id519 4165.0))
    ((:bounding_box_left :id508 3610))
    ((:bounding_box_left :id507 3605.0))
    ((:bounding_box_left :id492 4600))
    ((:bounding_box_left :id491 4425.0))
    ((:bounding_box_left :id480 3200))
    ((:bounding_box_left :id479 3085.0))
    ((:bounding_box_left :id475 3560))
    ((:bounding_box_left :id474 3085.0))
    ((:bounding_box_left :id463 3560))
    ((:bounding_box_left :id462 2950.0))
    ((:bounding_box_left :id453 4060))
    ((:bounding_box_left :id452 3605.0))
    ((:bounding_box_left :id448 2950))
    ((:bounding_box_left :id447 3565.0))
    ((:bounding_box_left :id435 3250))
    ((:bounding_box_left :id434 3645.0))
    ((:bounding_box_left :id427 3560))
    ((:bounding_box_left :id426 3215.0))
    ((:bounding_box_left :id419 4340))
    ((:bounding_box_left :id418 4115.0))
    ((:bounding_box_left :id409 4080))
    ((:bounding_box_left :id408 3645.0))
    ((:bounding_box_left :id404 3610))
    ((:bounding_box_left :id403 3605.0))
    ((:bounding_box_left :id388 3610))
    ((:bounding_box_left :id387 3605.0))
    ((:bounding_box_left :id383 3180))
    ((:bounding_box_left :id382 3605.0))
    ((:bounding_box_left :id378 4030))
    ((:bounding_box_left :id377 3645.0))
    ((:bounding_box_top :id572 240))
    ((:bounding_box_top :id571 60.0))
    ((:bounding_box_top :id556 960))
    ((:bounding_box_top :id555 880.0))
    ((:bounding_box_top :id551 960))
    ((:bounding_box_top :id550 880.0))
    ((:bounding_box_top :id535 840))
    ((:bounding_box_top :id534 960.0))
    ((:bounding_box_top :id530 330))
    ((:bounding_box_top :id529 960.0))
    ((:bounding_box_top :id525 670))
    ((:bounding_box_top :id524 960.0))
    ((:bounding_box_top :id520 330))
    ((:bounding_box_top :id519 960.0))
    ((:bounding_box_top :id508 800))
    ((:bounding_box_top :id507 710.0))
    ((:bounding_box_top :id492 280))
    ((:bounding_box_top :id491 280.0))
    ((:bounding_box_top :id480 240))
    ((:bounding_box_top :id479 150.0))
    ((:bounding_box_top :id475 150))
    ((:bounding_box_top :id474 150.0))
    ((:bounding_box_top :id463 150))
    ((:bounding_box_top :id462 290.0))
    ((:bounding_box_top :id453 330))
    ((:bounding_box_top :id452 1040.0))
    ((:bounding_box_top :id448 380))
    ((:bounding_box_top :id447 1000.0))
    ((:bounding_box_top :id435 280))
    ((:bounding_box_top :id434 470.0))
    ((:bounding_box_top :id427 470))
    ((:bounding_box_top :id426 320.0))
    ((:bounding_box_top :id419 280))
    ((:bounding_box_top :id418 280.0))
    ((:bounding_box_top :id409 240))
    ((:bounding_box_top :id408 150.0))
    ((:bounding_box_top :id404 430))
    ((:bounding_box_top :id403 190.0))
    ((:bounding_box_top :id388 630))
    ((:bounding_box_top :id387 510.0))
    ((:bounding_box_top :id383 330))
    ((:bounding_box_top :id382 510.0))
    ((:bounding_box_top :id378 280))
    ((:bounding_box_top :id377 470.0))
    ((:bounding_box_right :id572 4430))
    ((:bounding_box_right :id571 4425.0))
    ((:bounding_box_right :id556 3630))
    ((:bounding_box_right :id555 3625.0))
    ((:bounding_box_right :id551 3670))
    ((:bounding_box_right :id550 3665.0))
    ((:bounding_box_right :id535 3700))
    ((:bounding_box_right :id534 4205.0))
    ((:bounding_box_right :id530 3040))
    ((:bounding_box_right :id529 4205.0))
    ((:bounding_box_right :id525 3700))
    ((:bounding_box_right :id524 4205.0))
    ((:bounding_box_right :id520 4430))
    ((:bounding_box_right :id519 4205.0))
    ((:bounding_box_right :id508 3650))
    ((:bounding_box_right :id507 3645.0))
    ((:bounding_box_right :id492 4640))
    ((:bounding_box_right :id491 4465.0))
    ((:bounding_box_right :id480 3240))
    ((:bounding_box_right :id479 3125.0))
    ((:bounding_box_right :id475 3600))
    ((:bounding_box_right :id474 3125.0))
    ((:bounding_box_right :id463 3600))
    ((:bounding_box_right :id462 2990.0))
    ((:bounding_box_right :id453 4100))
    ((:bounding_box_right :id452 3645.0))
    ((:bounding_box_right :id448 2990))
    ((:bounding_box_right :id447 3605.0))
    ((:bounding_box_right :id435 3290))
    ((:bounding_box_right :id434 3685.0))
    ((:bounding_box_right :id427 3600))
    ((:bounding_box_right :id426 3255.0))
    ((:bounding_box_right :id419 4380))
    ((:bounding_box_right :id418 4155.0))
    ((:bounding_box_right :id409 4120))
    ((:bounding_box_right :id408 3685.0))
    ((:bounding_box_right :id404 3650))
    ((:bounding_box_right :id403 3645.0))
    ((:bounding_box_right :id388 3650))
    ((:bounding_box_right :id387 3645.0))
    ((:bounding_box_right :id383 3220))
    ((:bounding_box_right :id382 3645.0))
    ((:bounding_box_right :id378 4070))
    ((:bounding_box_right :id377 3685.0))
    ((:bounding_box_bottom :id572 280))
    ((:bounding_box_bottom :id571 100.0))
    ((:bounding_box_bottom :id556 1000))
    ((:bounding_box_bottom :id555 920.0))
    ((:bounding_box_bottom :id551 1000))
    ((:bounding_box_bottom :id550 920.0))
    ((:bounding_box_bottom :id535 880))
    ((:bounding_box_bottom :id534 1000.0))
    ((:bounding_box_bottom :id530 370))
    ((:bounding_box_bottom :id529 1000.0))
    ((:bounding_box_bottom :id525 710))
    ((:bounding_box_bottom :id524 1000.0))
    ((:bounding_box_bottom :id520 370))
    ((:bounding_box_bottom :id519 1000.0))
    ((:bounding_box_bottom :id508 840))
    ((:bounding_box_bottom :id507 750.0))
    ((:bounding_box_bottom :id492 320))
    ((:bounding_box_bottom :id491 320.0))
    ((:bounding_box_bottom :id480 280))
    ((:bounding_box_bottom :id479 190.0))
    ((:bounding_box_bottom :id475 190))
    ((:bounding_box_bottom :id474 190.0))
    ((:bounding_box_bottom :id463 190))
    ((:bounding_box_bottom :id462 330.0))
    ((:bounding_box_bottom :id453 370))
    ((:bounding_box_bottom :id452 1080.0))
    ((:bounding_box_bottom :id448 420))
    ((:bounding_box_bottom :id447 1040.0))
    ((:bounding_box_bottom :id435 320))
    ((:bounding_box_bottom :id434 510.0))
    ((:bounding_box_bottom :id427 510))
    ((:bounding_box_bottom :id426 360.0))
    ((:bounding_box_bottom :id419 320))
    ((:bounding_box_bottom :id418 320.0))
    ((:bounding_box_bottom :id409 280))
    ((:bounding_box_bottom :id408 190.0))
    ((:bounding_box_bottom :id404 470))
    ((:bounding_box_bottom :id403 230.0))
    ((:bounding_box_bottom :id388 670))
    ((:bounding_box_bottom :id387 550.0))
    ((:bounding_box_bottom :id383 370))
    ((:bounding_box_bottom :id382 550.0))
    ((:bounding_box_bottom :id378 320))
    ((:bounding_box_bottom :id377 510.0))
    ((:component build_process))
    ((:edge :id573))
    ((:edge :id557))
    ((:edge :id552))
    ((:edge :id536))
    ((:edge :id531))
    ((:edge :id526))
    ((:edge :id521))
    ((:edge :id509))
    ((:edge :id493))
    ((:edge :id481))
    ((:edge :id476))
    ((:edge :id464))
    ((:edge :id454))
    ((:edge :id449))
    ((:edge :id436))
    ((:edge :id428))
    ((:edge :id420))
    ((:edge :id410))
    ((:edge :id405))
    ((:edge :id389))
    ((:edge :id384))
    ((:edge :id379))
    ((:eltype :id575 ellipse))
    ((:eltype :id572 port))
    ((:eltype :id571 port))
    ((:eltype :id559 box))
    ((:eltype :id556 port))
    ((:eltype :id555 port))
    ((:eltype :id551 port))
    ((:eltype :id550 port))
    ((:eltype :id538 box))
    ((:eltype :id535 port))
    ((:eltype :id534 port))
    ((:eltype :id530 port))
    ((:eltype :id529 port))
    ((:eltype :id525 port))
    ((:eltype :id524 port))
    ((:eltype :id520 port))
    ((:eltype :id519 port))
    ((:eltype :id511 box))
    ((:eltype :id508 port))
    ((:eltype :id507 port))
    ((:eltype :id504 roundedrect))
    ((:eltype :id502 metadata))
    ((:eltype :id501 box))
    ((:eltype :id498 ellipse))
    ((:eltype :id495 box))
    ((:eltype :id492 port))
    ((:eltype :id491 port))
    ((:eltype :id483 ellipse))
    ((:eltype :id480 port))
    ((:eltype :id479 port))
    ((:eltype :id475 port))
    ((:eltype :id474 port))
    ((:eltype :id466 box))
    ((:eltype :id463 port))
    ((:eltype :id462 port))
    ((:eltype :id456 box))
    ((:eltype :id453 port))
    ((:eltype :id452 port))
    ((:eltype :id448 port))
    ((:eltype :id447 port))
    ((:eltype :id435 port))
    ((:eltype :id434 port))
    ((:eltype :id430 box))
    ((:eltype :id427 port))
    ((:eltype :id426 port))
    ((:eltype :id422 box))
    ((:eltype :id419 port))
    ((:eltype :id418 port))
    ((:eltype :id412 box))
    ((:eltype :id409 port))
    ((:eltype :id408 port))
    ((:eltype :id404 port))
    ((:eltype :id403 port))
    ((:eltype :id391 box))
    ((:eltype :id388 port))
    ((:eltype :id387 port))
    ((:eltype :id383 port))
    ((:eltype :id382 port))
    ((:eltype :id378 port))
    ((:eltype :id377 port))
    ((:geometry_h :id596 12))
    ((:geometry_h :id594 12))
    ((:geometry_h :id592 12))
    ((:geometry_h :id590 12))
    ((:geometry_h :id588 12))
    ((:geometry_h :id586 12))
    ((:geometry_h :id584 12))
    ((:geometry_h :id582 12))
    ((:geometry_h :id580 12))
    ((:geometry_h :id578 12))
    ((:geometry_h :id576 12))
    ((:geometry_h :id575 40.0))
    ((:geometry_h :id568 12))
    ((:geometry_h :id566 12))
    ((:geometry_h :id564 12))
    ((:geometry_h :id562 12))
    ((:geometry_h :id560 12))
    ((:geometry_h :id559 80.0))
    ((:geometry_h :id547 12))
    ((:geometry_h :id545 12))
    ((:geometry_h :id543 12))
    ((:geometry_h :id541 12))
    ((:geometry_h :id539 12))
    ((:geometry_h :id538 80.0))
    ((:geometry_h :id516 12))
    ((:geometry_h :id514 12))
    ((:geometry_h :id512 12))
    ((:geometry_h :id511 80.0))
    ((:geometry_h :id505 12))
    ((:geometry_h :id504 22))
    ((:geometry_h :id501 270.0))
    ((:geometry_h :id499 12))
    ((:geometry_h :id498 40.0))
    ((:geometry_h :id496 12))
    ((:geometry_h :id495 80.0))
    ((:geometry_h :id488 12))
    ((:geometry_h :id486 12))
    ((:geometry_h :id484 12))
    ((:geometry_h :id483 40.0))
    ((:geometry_h :id471 12))
    ((:geometry_h :id469 12))
    ((:geometry_h :id467 12))
    ((:geometry_h :id466 80.0))
    ((:geometry_h :id459 12))
    ((:geometry_h :id457 12))
    ((:geometry_h :id456 80.0))
    ((:geometry_h :id444 12))
    ((:geometry_h :id442 12))
    ((:geometry_h :id440 12))
    ((:geometry_h :id438 12))
    ((:geometry_h :id431 12))
    ((:geometry_h :id430 80.0))
    ((:geometry_h :id423 12))
    ((:geometry_h :id422 80.0))
    ((:geometry_h :id415 12))
    ((:geometry_h :id413 12))
    ((:geometry_h :id412 80.0))
    ((:geometry_h :id400 12))
    ((:geometry_h :id398 12))
    ((:geometry_h :id396 12))
    ((:geometry_h :id394 12))
    ((:geometry_h :id392 12))
    ((:geometry_h :id391 80.0))
    ((:geometry_w :id596 13))
    ((:geometry_w :id594 14))
    ((:geometry_w :id592 5))
    ((:geometry_w :id590 21))
    ((:geometry_w :id588 14))
    ((:geometry_w :id586 22))
    ((:geometry_w :id584 17))
    ((:geometry_w :id582 17))
    ((:geometry_w :id580 4))
    ((:geometry_w :id578 9))
    ((:geometry_w :id576 14))
    ((:geometry_w :id575 40.0))
    ((:geometry_w :id568 12))
    ((:geometry_w :id566 8))
    ((:geometry_w :id564 12))
    ((:geometry_w :id562 17))
    ((:geometry_w :id560 24))
    ((:geometry_w :id559 80.0))
    ((:geometry_w :id547 9))
    ((:geometry_w :id545 14))
    ((:geometry_w :id543 14))
    ((:geometry_w :id541 14))
    ((:geometry_w :id539 22))
    ((:geometry_w :id538 80.0))
    ((:geometry_w :id516 8))
    ((:geometry_w :id514 17))
    ((:geometry_w :id512 14))
    ((:geometry_w :id511 80.0))
    ((:geometry_w :id505 10))
    ((:geometry_w :id504 20))
    ((:geometry_w :id501 960.0))
    ((:geometry_w :id499 22))
    ((:geometry_w :id498 40.0))
    ((:geometry_w :id496 18))
    ((:geometry_w :id495 80.0))
    ((:geometry_w :id488 13))
    ((:geometry_w :id486 12))
    ((:geometry_w :id484 13))
    ((:geometry_w :id483 40.0))
    ((:geometry_w :id471 17))
    ((:geometry_w :id469 18))
    ((:geometry_w :id467 24))
    ((:geometry_w :id466 80.0))
    ((:geometry_w :id459 13))
    ((:geometry_w :id457 18))
    ((:geometry_w :id456 80.0))
    ((:geometry_w :id444 8))
    ((:geometry_w :id442 10))
    ((:geometry_w :id440 4))
    ((:geometry_w :id438 4))
    ((:geometry_w :id431 8))
    ((:geometry_w :id430 80.0))
    ((:geometry_w :id423 9))
    ((:geometry_w :id422 80.0))
    ((:geometry_w :id415 3))
    ((:geometry_w :id413 17))
    ((:geometry_w :id412 80.0))
    ((:geometry_w :id400 7))
    ((:geometry_w :id398 13))
    ((:geometry_w :id396 10))
    ((:geometry_w :id394 11))
    ((:geometry_w :id392 19))
    ((:geometry_w :id391 80.0))
    ((:geometry_left_x :id559 3585.0))
    ((:geometry_left_x :id538 4145.0))
    ((:geometry_left_x :id511 3585.0))
    ((:geometry_left_x :id504 3514.5))
    ((:geometry_left_x :id501 3045.0))
    ((:geometry_left_x :id495 4365.0))
    ((:geometry_left_x :id466 2930.0))
    ((:geometry_left_x :id456 3585.0))
    ((:geometry_left_x :id430 3175.0))
    ((:geometry_left_x :id422 4055.0))
    ((:geometry_left_x :id412 3585.0))
    ((:geometry_left_x :id391 3585.0))
    ((:geometry_top_y :id596 163.5))
    ((:geometry_top_y :id594 853.5))
    ((:geometry_top_y :id592 253.5))
    ((:geometry_top_y :id590 223.5))
    ((:geometry_top_y :id588 248.5))
    ((:geometry_top_y :id586 298.5))
    ((:geometry_top_y :id584 318.5))
    ((:geometry_top_y :id582 293.5))
    ((:geometry_top_y :id580 358.5))
    ((:geometry_top_y :id578 248.5))
    ((:geometry_top_y :id576 43.5))
    ((:geometry_top_y :id568 973.5))
    ((:geometry_top_y :id566 913.5))
    ((:geometry_top_y :id564 913.5))
    ((:geometry_top_y :id562 813.5))
    ((:geometry_top_y :id560 863.5))
    ((:geometry_top_y :id559 820.0))
    ((:geometry_top_y :id547 963.5))
    ((:geometry_top_y :id545 358.5))
    ((:geometry_top_y :id543 338.5))
    ((:geometry_top_y :id541 683.5))
    ((:geometry_top_y :id539 1023.5))
    ((:geometry_top_y :id538 980.0))
    ((:geometry_top_y :id516 743.5))
    ((:geometry_top_y :id514 633.5))
    ((:geometry_top_y :id512 693.5))
    ((:geometry_top_y :id511 650.0))
    ((:geometry_top_y :id505 1408.5))
    ((:geometry_top_y :id504 1398.5))
    ((:geometry_top_y :id501 1270.0))
    ((:geometry_top_y :id499 303.5))
    ((:geometry_top_y :id496 303.5))
    ((:geometry_top_y :id495 260.0))
    ((:geometry_top_y :id488 1083.5))
    ((:geometry_top_y :id486 293.5))
    ((:geometry_top_y :id484 173.5))
    ((:geometry_top_y :id471 413.5))
    ((:geometry_top_y :id469 1033.5))
    ((:geometry_top_y :id467 353.5))
    ((:geometry_top_y :id466 310.0))
    ((:geometry_top_y :id459 973.5))
    ((:geometry_top_y :id457 1023.5))
    ((:geometry_top_y :id456 980.0))
    ((:geometry_top_y :id444 363.5))
    ((:geometry_top_y :id442 373.5))
    ((:geometry_top_y :id440 323.5))
    ((:geometry_top_y :id438 283.5))
    ((:geometry_top_y :id431 303.5))
    ((:geometry_top_y :id430 260.0))
    ((:geometry_top_y :id423 303.5))
    ((:geometry_top_y :id422 260.0))
    ((:geometry_top_y :id415 163.5))
    ((:geometry_top_y :id413 173.5))
    ((:geometry_top_y :id412 130.0))
    ((:geometry_top_y :id400 483.5))
    ((:geometry_top_y :id398 553.5))
    ((:geometry_top_y :id396 513.5))
    ((:geometry_top_y :id394 443.5))
    ((:geometry_top_y :id392 493.5))
    ((:geometry_top_y :id391 450.0))
    ((:geometry_center_x :id596 3704.5))
    ((:geometry_center_x :id594 3714.5))
    ((:geometry_center_x :id592 3234.5))
    ((:geometry_center_x :id590 3645.5))
    ((:geometry_center_x :id588 4414.5))
    ((:geometry_center_x :id586 4514.5))
    ((:geometry_center_x :id584 4314.5))
    ((:geometry_center_x :id582 4184.5))
    ((:geometry_center_x :id580 4099.5))
    ((:geometry_center_x :id578 4132.0))
    ((:geometry_center_x :id576 4404.5))
    ((:geometry_center_x :id575 4405.0))
    ((:geometry_center_x :id568 3680.5))
    ((:geometry_center_x :id566 3584.5))
    ((:geometry_center_x :id564 3654.5))
    ((:geometry_center_x :id562 3645.5))
    ((:geometry_center_x :id560 3624.5))
    ((:geometry_center_x :id547 4214.5))
    ((:geometry_center_x :id545 4454.5))
    ((:geometry_center_x :id543 3054.5))
    ((:geometry_center_x :id541 3714.5))
    ((:geometry_center_x :id539 4184.5))
    ((:geometry_center_x :id516 3664.5))
    ((:geometry_center_x :id514 3620.5))
    ((:geometry_center_x :id512 3624.5))
    ((:geometry_center_x :id505 3529.5))
    ((:geometry_center_x :id499 4664.5))
    ((:geometry_center_x :id498 4665.0))
    ((:geometry_center_x :id496 4404.5))
    ((:geometry_center_x :id488 3645.5))
    ((:geometry_center_x :id486 3002.0))
    ((:geometry_center_x :id484 3064.5))
    ((:geometry_center_x :id483 3065.0))
    ((:geometry_center_x :id471 2919.5))
    ((:geometry_center_x :id469 3529.5))
    ((:geometry_center_x :id467 2969.5))
    ((:geometry_center_x :id459 3594.5))
    ((:geometry_center_x :id457 3624.5))
    ((:geometry_center_x :id444 3159.5))
    ((:geometry_center_x :id442 3269.5))
    ((:geometry_center_x :id440 3284.5))
    ((:geometry_center_x :id438 4034.5))
    ((:geometry_center_x :id431 3214.5))
    ((:geometry_center_x :id423 4094.5))
    ((:geometry_center_x :id415 3554.5))
    ((:geometry_center_x :id413 3624.5))
    ((:geometry_center_x :id400 3704.5))
    ((:geometry_center_x :id398 3664.5))
    ((:geometry_center_x :id396 3554.5))
    ((:geometry_center_x :id394 3594.5))
    ((:geometry_center_x :id392 3624.5))
    ((:geometry_center_y :id575 40.0))
    ((:geometry_center_y :id498 300.0))
    ((:geometry_center_y :id483 170.0))
    ((:used :id505))
    ((:port :id572))
    ((:port :id571))
    ((:port :id556))
    ((:port :id555))
    ((:port :id551))
    ((:port :id550))
    ((:port :id535))
    ((:port :id534))
    ((:port :id530))
    ((:port :id529))
    ((:port :id525))
    ((:port :id524))
    ((:port :id520))
    ((:port :id519))
    ((:port :id508))
    ((:port :id507))
    ((:port :id492))
    ((:port :id491))
    ((:port :id480))
    ((:port :id479))
    ((:port :id475))
    ((:port :id474))
    ((:port :id463))
    ((:port :id462))
    ((:port :id453))
    ((:port :id452))
    ((:port :id448))
    ((:port :id447))
    ((:port :id435))
    ((:port :id434))
    ((:port :id427))
    ((:port :id426))
    ((:port :id419))
    ((:port :id418))
    ((:port :id409))
    ((:port :id408))
    ((:port :id404))
    ((:port :id403))
    ((:port :id388))
    ((:port :id387))
    ((:port :id383))
    ((:port :id382))
    ((:port :id378))
    ((:port :id377))
    ((:source :id573 :id571))
    ((:source :id557 :id555))
    ((:source :id552 :id550))
    ((:source :id536 :id534))
    ((:source :id531 :id529))
    ((:source :id526 :id524))
    ((:source :id521 :id519))
    ((:source :id509 :id507))
    ((:source :id493 :id491))
    ((:source :id481 :id479))
    ((:source :id476 :id474))
    ((:source :id464 :id462))
    ((:source :id454 :id452))
    ((:source :id449 :id447))
    ((:source :id436 :id434))
    ((:source :id428 :id426))
    ((:source :id420 :id418))
    ((:source :id410 :id408))
    ((:source :id405 :id403))
    ((:source :id389 :id387))
    ((:source :id384 :id382))
    ((:source :id379 :id377))
    ((:sink :id573 :id572))
    ((:sink :id557 :id556))
    ((:sink :id552 :id551))
    ((:sink :id536 :id535))
    ((:sink :id531 :id530))
    ((:sink :id526 :id525))
    ((:sink :id521 :id520))
    ((:sink :id509 :id508))
    ((:sink :id493 :id492))
    ((:sink :id481 :id480))
    ((:sink :id476 :id475))
    ((:sink :id464 :id463))
    ((:sink :id454 :id453))
    ((:sink :id449 :id448))
    ((:sink :id436 :id435))
    ((:sink :id428 :id427))
    ((:sink :id420 :id419))
    ((:sink :id410 :id409))
    ((:sink :id405 :id404))
    ((:sink :id389 :id388))
    ((:sink :id384 :id383))
    ((:sink :id379 :id378))
    ))

(defparameter db-small
  '(((:roundedrect :id497))
    ((:metadata :id495 :id498))
    ((:ellipse :id568))
    ((:ellipse :id491))
    ((:ellipse :id476))
    ((:geometry_h :id589 12))
    ((:geometry_h :id587 12))
    ((:geometry_h :id585 12))
    ((:geometry_h :id583 12))
    ((:geometry_h :id581 12))
    ((:geometry_h :id579 12))
    ((:geometry_h :id577 12))
    ((:geometry_h :id575 12))
    ((:geometry_h :id573 12))
    ((:geometry_h :id571 12))
    ((:geometry_h :id569 12))
    ((:geometry_h :id568 40.0))
    ((:geometry_h :id561 12))
    ((:geometry_h :id559 12))
    ((:geometry_h :id557 12))
    ((:geometry_h :id555 12))
    ((:geometry_h :id553 12))
    ((:geometry_h :id552 80.0))
    ((:geometry_h :id540 12))
    ((:geometry_h :id538 12))
    ((:geometry_h :id536 12))
    ((:geometry_h :id534 12))
    ((:geometry_h :id532 12))
    ((:geometry_h :id531 80.0))
    ((:geometry_h :id509 12))
    ((:geometry_h :id507 12))
    ((:geometry_h :id505 12))
    ((:geometry_h :id504 80.0))
    ((:geometry_h :id498 12))
    ((:geometry_h :id497 22))
    ((:geometry_h :id494 270.0))
    ((:geometry_h :id492 12))
    ((:geometry_h :id491 40.0))
    ((:geometry_h :id489 12))
    ((:geometry_h :id488 80.0))
    ((:geometry_h :id481 12))
    ((:geometry_h :id479 12))
    ((:geometry_h :id477 12))
    ((:geometry_h :id476 40.0))
    ((:geometry_h :id464 12))
    ((:geometry_h :id462 12))
    ((:geometry_h :id460 12))
    ((:geometry_h :id459 80.0))
    ((:geometry_h :id452 12))
    ((:geometry_h :id450 12))
    ((:geometry_h :id449 80.0))
    ((:geometry_h :id437 12))
    ((:geometry_h :id435 12))
    ((:geometry_h :id433 12))
    ((:geometry_h :id431 12))
    ((:geometry_h :id424 12))
    ((:geometry_h :id423 80.0))
    ((:geometry_h :id416 12))
    ((:geometry_h :id415 80.0))
    ((:geometry_h :id408 12))
    ((:geometry_h :id406 12))
    ((:geometry_h :id405 80.0))
    ((:geometry_h :id393 12))
    ((:geometry_h :id391 12))
    ((:geometry_h :id389 12))
    ((:geometry_h :id387 12))
    ((:geometry_h :id385 12))
    ((:geometry_h :id384 80.0))
    ((:geometry_w :id589 13))
    ((:geometry_w :id587 14))
    ((:geometry_w :id585 5))
    ((:geometry_w :id583 21))
    ((:geometry_w :id581 14))
    ((:geometry_w :id579 22))
    ((:geometry_w :id577 17))
    ((:geometry_w :id575 17))
    ((:geometry_w :id573 4))
    ((:geometry_w :id571 9))
    ((:geometry_w :id569 14))
    ((:geometry_w :id568 40.0))
    ((:geometry_w :id561 12))
    ((:geometry_w :id559 8))
    ((:geometry_w :id557 12))
    ((:geometry_w :id555 17))
    ((:geometry_w :id553 24))
    ((:geometry_w :id552 80.0))
    ((:geometry_w :id540 9))
    ((:geometry_w :id538 14))
    ((:geometry_w :id536 14))
    ((:geometry_w :id534 14))
    ((:geometry_w :id532 22))
    ((:geometry_w :id531 80.0))
    ((:geometry_w :id509 8))
    ((:geometry_w :id507 17))
    ((:geometry_w :id505 14))
    ((:geometry_w :id504 80.0))
    ((:geometry_w :id498 10))
    ((:geometry_w :id497 20))
    ((:geometry_w :id494 960.0))
    ((:geometry_w :id492 22))
    ((:geometry_w :id491 40.0))
    ((:geometry_w :id489 18))
    ((:geometry_w :id488 80.0))
    ((:geometry_w :id481 13))
    ((:geometry_w :id479 12))
    ((:geometry_w :id477 13))
    ((:geometry_w :id476 40.0))
    ((:geometry_w :id464 17))
    ((:geometry_w :id462 18))
    ((:geometry_w :id460 24))
    ((:geometry_w :id459 80.0))
    ((:geometry_w :id452 13))
    ((:geometry_w :id450 18))
    ((:geometry_w :id449 80.0))
    ((:geometry_w :id437 8))
    ((:geometry_w :id435 10))
    ((:geometry_w :id433 4))
    ((:geometry_w :id431 4))
    ((:geometry_w :id424 8))
    ((:geometry_w :id423 80.0))
    ((:geometry_w :id416 9))
    ((:geometry_w :id415 80.0))
    ((:geometry_w :id408 3))
    ((:geometry_w :id406 17))
    ((:geometry_w :id405 80.0))
    ((:geometry_w :id393 7))
    ((:geometry_w :id391 13))
    ((:geometry_w :id389 10))
    ((:geometry_w :id387 11))
    ((:geometry_w :id385 19))
    ((:geometry_w :id384 80.0))
    ((:geometry_left_x :id552 3585.0))
    ((:geometry_left_x :id531 4145.0))
    ((:geometry_left_x :id504 3585.0))
    ((:geometry_left_x :id497 3514.5))
    ((:geometry_left_x :id494 3045.0))
    ((:geometry_left_x :id488 4365.0))
    ((:geometry_left_x :id459 2930.0))
    ((:geometry_left_x :id449 3585.0))
    ((:geometry_left_x :id423 3175.0))
    ((:geometry_left_x :id415 4055.0))
    ((:geometry_left_x :id405 3585.0))
    ((:geometry_left_x :id384 3585.0))
    ((:geometry_top_y :id589 163.5))
    ((:geometry_top_y :id587 853.5))
    ((:geometry_top_y :id585 253.5))
    ((:geometry_top_y :id583 223.5))
    ((:geometry_top_y :id581 248.5))
    ((:geometry_top_y :id579 298.5))
    ((:geometry_top_y :id577 318.5))
    ((:geometry_top_y :id575 293.5))
    ((:geometry_top_y :id573 358.5))
    ((:geometry_top_y :id571 248.5))
    ((:geometry_top_y :id569 43.5))
    ((:geometry_top_y :id561 973.5))
    ((:geometry_top_y :id559 913.5))
    ((:geometry_top_y :id557 913.5))
    ((:geometry_top_y :id555 813.5))
    ((:geometry_top_y :id553 863.5))
    ((:geometry_top_y :id552 820.0))
    ((:geometry_top_y :id540 963.5))
    ((:geometry_top_y :id538 358.5))
    ((:geometry_top_y :id536 338.5))
    ((:geometry_top_y :id534 683.5))
    ((:geometry_top_y :id532 1023.5))
    ((:geometry_top_y :id531 980.0))
    ((:geometry_top_y :id509 743.5))
    ((:geometry_top_y :id507 633.5))
    ((:geometry_top_y :id505 693.5))
    ((:geometry_top_y :id504 650.0))
    ((:geometry_top_y :id498 1408.5))
    ((:geometry_top_y :id497 1398.5))
    ((:geometry_top_y :id494 1270.0))
    ((:geometry_top_y :id492 303.5))
    ((:geometry_top_y :id489 303.5))
    ((:geometry_top_y :id488 260.0))
    ((:geometry_top_y :id481 1083.5))
    ((:geometry_top_y :id479 293.5))
    ((:geometry_top_y :id477 173.5))
    ((:geometry_top_y :id464 413.5))
    ((:geometry_top_y :id462 1033.5))
    ((:geometry_top_y :id460 353.5))
    ((:geometry_top_y :id459 310.0))
    ((:geometry_top_y :id452 973.5))
    ((:geometry_top_y :id450 1023.5))
    ((:geometry_top_y :id449 980.0))
    ((:geometry_top_y :id437 363.5))
    ((:geometry_top_y :id435 373.5))
    ((:geometry_top_y :id433 323.5))
    ((:geometry_top_y :id431 283.5))
    ((:geometry_top_y :id424 303.5))
    ((:geometry_top_y :id423 260.0))
    ((:geometry_top_y :id416 303.5))
    ((:geometry_top_y :id415 260.0))
    ((:geometry_top_y :id408 163.5))
    ((:geometry_top_y :id406 173.5))
    ((:geometry_top_y :id405 130.0))
    ((:geometry_top_y :id393 483.5))
    ((:geometry_top_y :id391 553.5))
    ((:geometry_top_y :id389 513.5))
    ((:geometry_top_y :id387 443.5))
    ((:geometry_top_y :id385 493.5))
    ((:geometry_top_y :id384 450.0))
    ((:geometry_center_x :id589 3704.5))
    ((:geometry_center_x :id587 3714.5))
    ((:geometry_center_x :id585 3234.5))
    ((:geometry_center_x :id583 3645.5))
    ((:geometry_center_x :id581 4414.5))
    ((:geometry_center_x :id579 4514.5))
    ((:geometry_center_x :id577 4314.5))
    ((:geometry_center_x :id575 4184.5))
    ((:geometry_center_x :id573 4099.5))
    ((:geometry_center_x :id571 4132.0))
    ((:geometry_center_x :id569 4404.5))
    ((:geometry_center_x :id568 4405.0))
    ((:geometry_center_x :id561 3680.5))
    ((:geometry_center_x :id559 3584.5))
    ((:geometry_center_x :id557 3654.5))
    ((:geometry_center_x :id555 3645.5))
    ((:geometry_center_x :id553 3624.5))
    ((:geometry_center_x :id540 4214.5))
    ((:geometry_center_x :id538 4454.5))
    ((:geometry_center_x :id536 3054.5))
    ((:geometry_center_x :id534 3714.5))
    ((:geometry_center_x :id532 4184.5))
    ((:geometry_center_x :id509 3664.5))
    ((:geometry_center_x :id507 3620.5))
    ((:geometry_center_x :id505 3624.5))
    ((:geometry_center_x :id498 3529.5))
    ((:geometry_center_x :id492 4664.5))
    ((:geometry_center_x :id491 4665.0))
    ((:geometry_center_x :id489 4404.5))
    ((:geometry_center_x :id481 3645.5))
    ((:geometry_center_x :id479 3002.0))
    ((:geometry_center_x :id477 3064.5))
    ((:geometry_center_x :id476 3065.0))
    ((:geometry_center_x :id464 2919.5))
    ((:geometry_center_x :id462 3529.5))
    ((:geometry_center_x :id460 2969.5))
    ((:geometry_center_x :id452 3594.5))
    ((:geometry_center_x :id450 3624.5))
    ((:geometry_center_x :id437 3159.5))
    ((:geometry_center_x :id435 3269.5))
    ((:geometry_center_x :id433 3284.5))
    ((:geometry_center_x :id431 4034.5))
    ((:geometry_center_x :id424 3214.5))
    ((:geometry_center_x :id416 4094.5))
    ((:geometry_center_x :id408 3554.5))
    ((:geometry_center_x :id406 3624.5))
    ((:geometry_center_x :id393 3704.5))
    ((:geometry_center_x :id391 3664.5))
    ((:geometry_center_x :id389 3554.5))
    ((:geometry_center_x :id387 3594.5))
    ((:geometry_center_x :id385 3624.5))
    ((:geometry_center_y :id568 40.0))
    ((:geometry_center_y :id491 300.0))
    ((:geometry_center_y :id476 170.0))

    ((:ellipse-geometry (:? id) (:? cx) (:? cy) (:? hw) (:? hh))
     (:ellipse (:? id))
     (:geometry_center_x (:? id) (:? cx))
     (:geometry_center_y (:? id) (:? cy))
     (:geometry_w (:? id) (:? hw))
     (:geometry_h (:? id) (:? hh)))))

(defparameter db-very-small
  '(((:ellipse :id568))
    ((:geometry_h :id568 40.0))
    ((:geometry_w :id568 40.0))
    ((:geometry_center_x :id568 4405.0))
    ((:geometry_center_y :id568 40.0))))

(defparameter db-very-small2
  '(((:ellipse :id568))
    ((:text :id1 :str1))
    ((:text :id2 :str2))
    ((:used :str1))
    ((:rect :id391))
    ((:bounding_box_left :id391 3585.0))
    ((:bounding_box_top :id391 450.0))
    ((:bounding_box_right :id391 3665.0))
    ((:bounding_box_bottom :id391 530.0))
    ((:geometry_h :id568 40.0))
    ((:geometry_w :id568 40.0))
    ((:geometry_center_x :id568 4405.0))
    ((:geometry_center_y :id568 40.0))))

(defparameter old-goal
  `((:mortal (:? cl-user::x))))

(defparameter old-db
  `(
    ((:man :nils))

    ((:mortal (:? cl-user::x))
     (:man (:? cl-user::x)))

    ))

(defun cl-user::htest-2 ()
  (let ((fb '(((:man nils)))))
    (let ((complete-db fb)
          (initial-db fb)
          (top-link nil)
          (top-env *empty*)
          (top-cut nil))
      (prove top-link '((:aardvark :nils)) initial-db top-env 1 top-cut complete-db nil *self*))))

(defun cl-user::htest-1 ()
  (let ((fb '(((:man :nils)))))
    (let ((complete-db fb)
          (initial-db fb)
          (top-link nil)
          (top-env *empty*)
          (top-cut nil))
      (prove top-link '((:man :nils)) initial-db top-env 1 top-cut complete-db nil *self*))))

(defun cl-user::htest0 ()
  (let ((complete-db db-very-small2)
        (initial-db db-very-small2)
        (top-link nil)
        (top-env *empty*)
        (top-cut nil))
    (prove top-link '((:man :nils)) initial-db top-env 1 top-cut complete-db nil *self*)))

(defun cl-user::htest1 ()
  (let ((complete-db db-very-small2)
        (initial-db db-very-small2)
        (top-link nil)
        (top-env *empty*)
        (top-cut nil))
    (prove top-link '((:man (:? cl-user::m))) initial-db top-env 1 top-cut complete-db nil *self*)))


(defun cl-user::htest2 ()
  (let ((complete-db db-very-small2)
        (initial-db db-very-small2)
        (top-link nil)
        (top-env *empty*)
        (top-cut nil)
        (top-results-accum nil)
        (top-success :no))
    (prove top-link '((:mortal :nils)) initial-db top-env 1 top-cut complete-db nil *self*)))

(defun cl-user::htest3 ()
  (let ((complete-db db-very-small2)
        (initial-db db-very-small2)
        (top-link nil)
        (top-env *empty*)
        (top-cut nil))
    (prove top-link '((:mortal (:? cl-user::m))) initial-db top-env 1 top-cut complete-db nil *self*)))





(defun htest ()
  (let ((db db-very-small))
    (let ((complete-db db-very-small2)
          (initial-db db-very-small2)
          (top-link nil)
          (top-env *empty*)
          (top-cut nil))
      (prove top-link '((:ellipse (:? e))) initial-db top-env 1 top-cut complete-db nil *self*))))

(defun hteste ()
  (let ((idb (cons
              '((:ellipse-geometry (:? id) (:? cx) (:? cy) (:? hw) (:? hh))
                (:ellipse (:? id))
                (:geometry_center_x (:? id) (:? cx))
                (:geometry_center_y (:? id) (:? cy))
                (:geometry_w (:? id) (:? hw))
                (:geometry_h (:? id) (:? hh)))
              db-very-small)))
    (let ((complete-db idb)
          (initial-db idb)
          (top-link nil)
          (top-env *empty*)
          (top-cut nil))
      (let ((r (prove top-link
                      '((:ellipse-geometry
                         (:? cl-user::eid)
                         (:? cl-user::cx)
                         (:? cl-user::cy)
                         (:? cl-user::hw)
                         (:? cl-user::hh)))
                      initial-db
                      top-env
                      1
                      top-cut
                      complete-db
                      nil
                      *self*)))
        (let ((rr (mapcar #'(lambda (lis)
                              (assert (= 5 (length lis)))
                              (let ((cl-user::id (cdr (first lis)))
                                    (cl-user::cx (cdr (second lis)))
                                    (cl-user::cy (cdr (third lis)))
                                    (cl-user::hw (cdr (fourth lis)))
                                    (cl-user::hh (cdr (fifth lis))))
                                (list
                                 (list 'bounding_box_left cl-user::id (- cl-user::cx cl-user::hw))
                                 (list 'bounding_box_top cl-user::id (- cl-user::cy cl-user::hh))
                                 (list 'bounding_box_right cl-user::id (+ cl-user::cx cl-user::hw))
                                 (list 'bounding_box_bottom cl-user::id (+ cl-user::cy cl-user::hh)))))
                          r)))
          rr)))))



(defun asserta (self arg1 l g r e n c result)
  (declare (ignore self))
  (format *standard-output* "~&asserta ~S~%" arg1)
  (values NIL l g r e n c result))

(defun ltest ()
  (labels ((printit (self l g r e n c result)
             (declare (ignore self))
             (format *standard-output* "~&found ellipse ~A ~A ~A ~A ~A~%"
                     (resolve 'id e) (resolve 'cx e) (resolve 'cy e)
                     (resolve 'hw e) (resolve 'hh e))
             (values l g r e n c result)))
    (let ((idb (cons
                '(
                  (:ellipse-geo (:? id) (:? cx) (:? cy) (:? hw) (:? hh))
                  (:ellipse (:? id))
                  (:geometry_center_x (:? id) (:? cx))
                  (:geometry_center_y (:? id) (:? cy))
                  (:geometry_w (:? id) (:? hw))
                  (:geometry_h (:? id) (:? hh))
                  (:lisp (asserta (:is-an-ellipse (:? id))))
                  )
                db-very-small)))
      (let ((complete-db idb)
            (initial-db idb)
            (top-link nil)
            (top-env *empty*)
            (top-cut nil))
        (let ((r (prove top-link
                        '((:ellipse-geo
                           (:? cl-user::eid)
                           (:? cl-user::cx)
                           (:? cl-user::cy)
                           (:? cl-user::hw)
                           (:? cl-user::hh)))
                        initial-db
                        top-env
                        1
                        top-cut
                        complete-db
                        nil
                        *self*)))
          (let ((rr (mapcar #'(lambda (lis)
                                (assert (= 5 (length lis)))
                                (let ((cl-user::id (cdr (first lis)))
                                      (cl-user::cx (cdr (second lis)))
                                      (cl-user::cy (cdr (third lis)))
                                      (cl-user::hw (cdr (fourth lis)))
                                      (cl-user::hh (cdr (fifth lis))))
                                  (list
                                   (list 'bounding_box_left cl-user::id (- cl-user::cx cl-user::hw))
                                   (list 'bounding_box_top cl-user::id (- cl-user::cy cl-user::hh))
                                   (list 'bounding_box_right cl-user::id (+ cl-user::cx cl-user::hw))
                                   (list 'bounding_box_bottom cl-user::id (+ cl-user::cy cl-user::hh)))))
                            r)))
            rr))))))
                  

(defun printf (self arg l g r e n c result)
  (declare (ignore self))
  (format *standard-output* "~&printf ~S~%" arg)
  (values T l g r e n c result))
           
(defun printit (self top left l g r e n c result)
  (declare (ignore self))
  (format *standard-output* "~&top ~S left ~S~%" top left)
  (values T l g r e n c result))

(defun printf-test ()
  (let ((complete-db db-very-small2)
        (initial-db db-very-small2)
        (top-link nil)
        (top-env *empty*)
        (top-cut nil))
    (let ((results (prove top-link '(
                                     (:bounding_box_top :id391 (:? top))
                                     (:lisp (printf 1))
                                     (:bounding_box_left :id391 (:? left))
                                     (:lisp (printf 2))
                                     (:lisp (printit (:? top) (:? left)))
                                     )
                          initial-db top-env 1 top-cut complete-db nil *self*)))
      (format *standard-output* "~&results ~S~%" results))))

(defparameter negation-db
  '(((:some :foo))
    ((:some :bar))
    ((:some :baz))

    ((:eq (:? X) (:? X)))

    ((:neq (:? X) (:? Y))
     (:eq (:? X) (:? Y)) :! :fail)

    ((:neq (:? X) (:? Y)))))

(defparameter negation-goals
  '((:some (:? X))
    (:some (:? Y))
    (:neq (:? X) (:? Y))))

(defun negation-test1 ()
  (let ((complete-db negation-db)
        (initial-db negation-db)
        (top-link nil)
        (top-env *empty*)
        (top-cut nil))
    (prove top-link negation-goals initial-db top-env 1 top-cut complete-db nil *self*)))

(defparameter negation-db2
  `(((:text :id1 :str1))
    ((:text :id2 :str2))
    ((:used :str2))
    ((:unassigned-text (:? text-id))
     (:text (:? text-id) (:? str-id))
     (:not-used (:? str-id)))
    ((:not-used (:? str-id))
     (:used (:? str-id))
     :!
     :fail)
    ((:not-used (:? str-id)))))

(defun negation-test2 ()
  (let ((top-link nil)
        (top-env *empty*)
        (top-cut nil))
    (let ((db negation-db2))
      (let ((initial-db db)
            (complete-db db)
            (goal '((:unassigned-text (:? text-id)))))
        (let ((results (prove top-link goal initial-db top-env 1 top-cut complete-db nil *self*)))
          (format *standard-output* "~&results ~S~%" results))))))





(defun run-prolog (self goal fb)
  (declare (ignore self))
  (let ((initial-db fb)
        (complete-db fb)
        (top-link nil) (top-env *empty*) (top-cut nil))
    (let ((results (prove top-link goal initial-db top-env 1 top-cut complete-db nil *self*)))
      (format *standard-output* "~&results ~S~%" results))))

;;;;
;;; test bounding box rule
;;;;

(defvar rule-bounding-box '(
                            (:bounding-box (:? id) (:? left) (:? top) (:? right) (:? bottom))
                            
                            (:bounding_box_left (:? id) (:? left))
                            (:bounding_box_top (:? id) (:? top))
                            (:bounding_box_right (:? id) (:? right))
                            (:bounding_box_bottom (:? id) (:? bottom))
                            ))
 
(defun bbtest ()
  (let ((fb (cons rule-bounding-box
                  '(
                    ((:rect :id3))
                    ((:bounding_box_left :id3 3585.0))
                    ((:bounding_box_top :id3 450.0))
                    ((:bounding_box_right :id3 3665.0))
                    ((:bounding_box_bottom :id3 530.0))
                    ((:rect :id4))
                    ((:bounding_box_left :id4 3585.0))
                    ((:bounding_box_top :id4 451.0))
                    ((:bounding_box_right :id4 33664.0))
                    ((:bounding_box_bottom :id4 529.0))
                    )
                  )))
    (let ((goal '(
                  (:bounding-box (:? id) (:? left) (:? top) (:? right) (:? bottom))
                  )))
      (run-prolog nil goal fb))))

;;;;
;;; test bounding box within bounding box
;;;;

(defmethod lisp-BoundingBoxCompletelyInside (self
                                             L1 T1 R1 B1
                                             L2 T2 R2 B2
                                             l g r e n c result)
  (declare (ignore self))
  (values
   (and (>= L1 L2) (>= T1 T2) (>= R2 R1) (>= B2 B1))
   l g r e n c result))

(defmethod bounding-box-completely-inside (#+nil(self e/part:part) id1 id2)
  (let ((fb (cons rule-bounding-box
                  '(
                    ((:rect :id-outer))
                    ((:bounding_box_left :id-outer 3585.0))
                    ((:bounding_box_top :id-outer 450.0))
                    ((:bounding_box_right :id-outer 3665.0))
                    ((:bounding_box_bottom :id-outer 530.0))
                    ((:rect :id-inner))
                    ((:bounding_box_left :id-inner 3586.0))
                    ((:bounding_box_top :id-inner 451.0))
                    ((:bounding_box_right :id-inner 3664.0))
                    ((:bounding_box_bottom :id-inner 529.0))


                    ((:bounding-box-completely-inside (:? id10) (:? id20))
                     
                     (:not-same (:? id10) (:? id20))
                     (:bounding-box (:? id10) (:? L10) (:? T10) (:? R10) (:? B10))
                     (:bounding-box (:? id20) (:? L20) (:? T20) (:? R20) (:? B20))
                     (:lisp (lisp-BoundingBoxCompletelyInside (:? L10) (:? T10) (:? R10) (:? B10)
                                                              (:? L20) (:? T20) (:? R20) (:? B20)))
                     )
                    ((:not-same (:? x) (:? x))
                     :!
                     :fail)
                    ((:not-same (:? x) (:? y))
                     :!)
                    )
                  )))
      (let ((goal `(
                    (:bounding-box-completely-inside ,id1  ,id2)
                    (:lisp (printf ""))
                    (:lisp (printf ,id1))
                    (:lisp (printf ,id2))
                    (:lisp (printf "yes"))
                    )))
        (run-prolog nil goal fb))))


;;;;
;;; test left-top within bounding box
;;;;
;;; already handled explicitly, TODO: replace with above
;;;;

;;;;
;;; test center within bounding box
;;;;
;;; already handled explicitly, TODO: replace with above
;;;;



(defun bb-in1 () (pprint (bounding-box-completely-inside :id-outer :id-inner))) ;; no

(defun bb-in2 () (pprint (bounding-box-completely-inside :id-inner :id-outer)));; yes

(defun ge-test1 ()
  (format *standard-output* "~&GE-test1~%")
  (let ((fb
         `(((:get-ints 1 2))))
        (goal '( (:get-ints (:? x) (:? y)) (>= (:? x) (:? y)) )))
    (run-prolog nil goal fb)))
    
(defun ge-test2 ()
  (format *standard-output* "~&GE-test2~%")
  (let ((fb
         `(((:get-ints 1 2))))
        (goal '( (:get-ints (:? x) (:? y)) (>= (:? y) (:? x)) )))
    (run-prolog nil goal fb)))
    
(defun ge-test3 ()
  (format *standard-output* "~&GE-test3~%")
  (let ((fb
         `(((:get-ints 1 2))
           ((:get-ints 2 1))))
        (goal '( (:get-ints (:? x) (:? y)) (>= (:? x) (:? y)) )))
    (run-prolog nil goal fb)))
    
(defun le-test1 ()
  (format *standard-output* "~&LE-test1~%")
  (let ((fb
         `(((:get-ints 1 2))))
        (goal '( (:get-ints (:? x) (:? y)) (<= (:? x) (:? y)) )))
    (run-prolog nil goal fb)))
    
(defun le-test2 ()
  (format *standard-output* "~&LE-test2~%")
  (let ((fb
         `(((:get-ints 1 2))))
        (goal '( (:get-ints (:? x) (:? y)) (<= (:? y) (:? x)) )))
    (run-prolog nil goal fb)))
    
(defun G-test1 ()
  (format *standard-output* "~&G-test1~%")
  (let ((fb
         `(((:Gt-ints 1 2))))
        (goal '( (:Gt-ints (:? x) (:? y)) (> (:? x) (:? y)) )))
    (run-prolog nil goal fb)))
    
(defun G-test2 ()
  (format *standard-output* "~&G-test2~%")
  (let ((fb
         `(((:Gt-ints 1 2))))
        (goal '( (:Gt-ints (:? x) (:? y)) (> (:? y) (:? x)) )))
    (run-prolog nil goal fb)))
    
(defun L-test1 ()
  (format *standard-output* "~&L-test1~%")
  (let ((fb
         `(((:Gt-ints 1 2))))
        (goal '( (:Gt-ints (:? x) (:? y)) (< (:? x) (:? y)) )))
    (run-prolog nil goal fb)))
    
(defun L-test2 ()
  (format *standard-output* "~&L-test2~%")
  (let ((fb
         `(((:Gt-ints 1 2))))
        (goal '( (:Gt-ints (:? x) (:? y)) (< (:? y) (:? x)) )))
    (run-prolog nil goal fb)))

(defun compare (self v n)
  (declare (ignore self))
  (>= v n))

(defun lispv-test1 ()
  (format *standard-output* "~&lispv test1~%")
  (let ((fb
         `(((:get-int 3))
           ((:fetch-int (:? x))
            (:get-int  (:? x)))))
        (goal '( (:fetch-int (:? x))
                 (:lispv (:? y) (compare (:? x) 2))
                 )))
    (run-prolog nil goal fb)))
    
(defun lispv-test2 ()
  (format *standard-output* "~&lispv test2~%")
  (let ((fb
         `(((:get-int 3))
           ((:fetch-int (:? x))
            (:get-int  (:? x)))))
        (goal '( (:fetch-int (:? x))
                 (:lispv (:? y) (compare (:? x) 5))
                 )))
    (run-prolog nil goal fb)))
    
(defun lispv-test3 ()
  (format *standard-output* "~&lispv test3~%")
  (let ((fb
         `(((:get-int 3))
           ((:fetch-int (:? x))
            (:get-int  (:? x)))
           ((:is (:? x) (:? y))
            :!
            :fail)
           ((:is (:? x) (:? x)))))            
        (goal '( (:fetch-int (:? x))
                 (:lispv (:? y) (compare (:? x) 5))
                 (:is (:? y) t)
                 )))
    (run-prolog nil goal fb)))

(defun lispv-test4 ()
  (format *standard-output* "~&lispv test4~%")
  (let ((fb
         `(((:get-xint 3))
           ((:get-yint 1))))
        (goal '( (:get-xint (:? x))
                 (:get-yint (:? y))
                 (:lispv (:? z) (compare (:? x) (:? y)))
                 (:lisp (printf "yes"))
                 )))
    (run-prolog nil goal fb)))

(defun lispv-test5 ()
  (format *standard-output* "~&lispv test5~%")
  (let ((fb
         `(((:get-xint 3))
           ((:get-yint 1))
           ((:is (:? x) (:? x))
            :!
            )
           ((:is (:? x) (:? y))
            :!
            :fail
            )))
        (goal '( (:get-xint (:? x))
                 (:get-yint (:? y))
                 (:lispv (:? z) (compare (:? x) (:? y)))
                 (:is (:? z) t)
                 (:lisp (printf "yes"))
                 )))
    (run-prolog nil goal fb)))
    
    
(defun cl-user::htest ()
  (htest)
  (hteste)
  (pprint (negation-test1))
  (pprint (negation-test2))
  (pprint (bbtest))
  (pprint (bb-in1))
  (pprint (bb-in2))
  (ge-test1)
  (ge-test2)
  (le-test1)
  (le-test2)
  (g-test1)
  (g-test2)
  (l-test1)
  (l-test2)
  (lispv-test1)
  (lispv-test2)
  (lispv-test3)
  (lispv-test4)
  (lispv-test5))
